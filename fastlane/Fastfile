fastlane_require 'pry'
fastlane_require 'spaceship'
fastlane_require 'nokogiri'

before_all do
  message =  changelog_from_git_commits(commits_count: 1)

  @cordova_folder = File.expand_path("../cordova")
  @fastlane_folder = File.expand_path("../fastlane")

  cordova_config = Nokogiri::XML((File.read("#{@cordova_folder}/config.xml")))
  @app_identifier = cordova_config.xpath("/*/@id").first.value
  @config_version = cordova_config.xpath("/*/@version").first.value
  @app_name = cordova_config.xpath("//xmlns:name").text
  @team_id = cordova_config.xpath("//xmlns:team_id").text

  @metadata = YAML.load_file("#{@fastlane_folder}/metadata.yml")
  @metadata["copyright"] = @metadata["copyright"].gsub("&current_year", Time.now.year.to_s)
  @languages = get_languages(@metadata)

  @environment = "development"
  if @branch == 'appstore'
    @environment = "production"
  end

  @build_hockey = message.include?('DEPLOY_HOCKEY')
  @deploy_store = message.include?('DEPLOY_STORE')
  @release_notes = message.gsub('BUILD_HOCKEY', '')
  @branch = git_branch.gsub('origin/', '')
  Dir.chdir('..') if in_fastlane

  if @deploy_store
    check_version
  end
end

lane :lane_deploy do

  if @build_hockey || @deploy_store
    lane_deploy_ios
    lane_deploy_android
  end
end

lane :lane_deploy_android do
  FileUtils.rm_rf("#{@cordova_folder}/platforms/android/build/outputs/apk/.", secure: true)
  android_version = get_android_version(@config_version)

  sh('APP_ENV=#{@environment} bin/maji build android')

  unless @deploy_store

    hockey public_identifier: ENV['FL_HOCKEY_PUBLIC_IDENTIFIER_ANDROID'],
           apk: "#{@cordova_folder}/platforms/android/build/outputs/apk/android-debug.apk",
           create_update: true,
           bundle_version: android_version,
           bundle_short_version: @branch,
           status: '2',
           notes: @release_notes
  else
    # release procedure for play store here
    sh('APP_ENV=#{@environment} bin/maji build android --release')

    sign_apk(
      keystore_path: "#{@fastlane_folder}/vault/android.jks",
      alias: "android-release-signed",
      storepass: ENV['ANDROID_KEY_STORE_PASSWORD'],
      tsa: "http://timestamp.comodoca.com/rfc316",
      apk_path: "#{@cordova_folder}/platforms/android/build/outputs/apk/android-release-unsigned.apk"
    )

    zipalign(apk_path: "#{lane_context[SharedValues::SIGNED_APK_PATH]}")

    sh("calabash-android resign #{@cordova_folder}/platforms/android/build/outputs/apk/android-release-unsigned.apk")

    prepare_android_metadata

    fix_avd_location

    automated_test_emulator_run(
      ADB_restart: false,
      AVD_setup_path: "#{@fastlane_folder}/AVD_setup.json",
      shell_task:"cd #{@fastlane_folder}/ && SCREENSHOT_PATH=#{@fastlane_folder}/screenshots/android/ bundler exec calabash-android run #{@cordova_folder}/platforms/android/build/outputs/apk/android-release-unsigned.apk"
    )

    # For now just copy it over to all the language directories. There's no way we can change the language of the phone from cli yet.
    @languages.each {|lang|
      FileUtils.cp_r("#{@fastlane_folder}/screenshots/android/.", "#{@fastlane_folder}/metadata/android/#{lang}/images/phoneScreenshots/")
    }
    FileUtils.rm_rf("#{@fastlane_folder}/screenshots/android/", secure: true)

    supply  track: "production",
            apk: "#{@cordova_folder}/platforms/android/build/outputs/apk/android-release.apk",
            json_key: "#{@fastlane_folder}/vault/ANDROID_JSON_KEY_FILE.json",
            package_name: @app_identifier,
            metadata_path: "#{@fastlane_folder}/metadata/android/"
  end
end

lane :lane_deploy_ios do
  FileUtils.rm_rf("#{@cordova_folder}/platforms/ios/build/device/.", secure: true)
  FileUtils.rm_rf("tmp/output/#{@app_name}.result/", secure: true)

  # where the signed ipa is placed
  output_dir = File.join(Dir.pwd, "tmp/output")
  setup_jenkins(output_directory: output_dir)

  #Download the profile from apple so we can obtain the profile_uuid of the provisioning profile
  FileUtils.rm_rf("profiles/", secure: true)
  FileUtils.mkdir_p("profiles")

  sh("fastlane sigh --provisioning_name=\"match AdHoc #{@app_identifier}\" --username=\"info@kabisa.nl\" --app_identifier=\"#{@app_identifier}\" --skip_install --adhoc --ignore_profiles_with_different_name --output_path=\"./profiles\"")
  sh("security cms -D -i ./profiles/AdHoc_#{@app_identifier}.mobileprovision > ./profiles/AdHoc_#{@app_identifier}.plist || true")
  profile_uuid = sh("/usr/libexec/PlistBuddy -c \"Print :UUID\" ./profiles/AdHoc_#{@app_identifier}.plist").chomp
  FileUtils.rm_rf("profiles/", secure: true)

  #Build the app for ios
  sh("APP_ENV=#{@environment} bin/maji build ios -- --codeSignIdentity=\"iPhone Distribution: Kabisa BV (#{@team_id})\" --developmentTeam=\"#{@team_id}\" --packageType=\"adHoc\" --provisioningProfile=\"#{profile_uuid}\"")

  match username: 'info@kabisa.nl',
        git_url: 'git@github.com:kabisa/match-certificates.git',
        type: 'adhoc',
        app_identifier: @app_identifier,
        force_for_new_devices: :true

  #Make sure automatic code signing is disabled, we dont want this.
  # disable_automatic_code_signing(
  #   path: "#{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj",
  #   team_id: @team_id
  # )

  #Make sure the correct provisioning profiles are setup based on the earlier obtained profile_uuid
  update_project_provisioning(
    xcodeproj: "#{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj",
    profile: "/Users/jenkins/Library/MobileDevice/Provisioning\ Profiles/#{profile_uuid}.mobileprovision",
    build_configuration: "Release"
  )

  upgrade_super_old_xcode_project(
    path: "#{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj",
    team_id: @team_id
  )

  # opening xcode prevents timeout
  sh("open -a xcode #{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj")

  gym scheme: @app_name,
      project: "#{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj",
      export_method: "ad-hoc"


  unless @deploy_store
    hockey public_identifier: ENV['FL_HOCKEY_PUBLIC_IDENTIFIER_IOS'],
           ipa: File.join(output_dir, "#{@app_name}.ipa"),
           create_update: true,
           bundle_version: @config_version,
           bundle_short_version: @branch,
           status: '2',
           notes: @release_notes

  else
    # release procedure for appstore here
    # Make sure old screenshots are removed
    FileUtils.rm_rf("#{@fastlane_folder}/screenshots/*", secure: true)

    ionic_ios_config_snapshot ionic_scheme_name:"maji-screen-shots",
                              ionic_ios_xcode_path: "#{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj",
                              ionic_min_target_ios: "11.0.1"

    #generate new screenshots
    snapshot  project: "#{@cordova_folder}/platforms/ios/#{@app_name}.xcodeproj",
              output_directory: "#{@fastlane_folder}/screenshots/",
              scheme: @app_name,
              skip_helper_version_check: true,
              ios_version: "11.1",
              test_target_name: "maji-screen-shots",
              app_identifier: @app_identifier,
              reinstall_app: true,
              erase_simulator: true,
              skip_open_summary: true

    deliver ipa: "#{output_dir}/#{@app_name}.ipa",
            submit_for_review: true,
            force: true,
            username: "info@kabisa.nl",
            overwrite_screenshots: true,
            metadata_path: "#{@fastlane_folder}/metadata/",
            screenshots_path: "#{@fastlane_folder}/screenshots/",
            app_icon: "#{current_dir}/src/assets/logo/AppStore-1024.png"

  end

end

def check_version
  Spaceship::Tunes.login("info@kabisa.nl", ENV['FASTLANE_PASSWORD'])
  app = Spaceship::Tunes::Application.find(@app_identifier)
  apple_version = app.build_trains.keys.last

  if Gem::Version.new(@config_version) <= Gem::Version.new(apple_version)
    raise 'The version is your Cordova config is NOT higher than the version in iTunes Connect. Please increment your version. The iTunes Connect version is: ' + apple_version
  end

end

def get_android_version (config_version)
  version_splitted = config_version.split "."
  version_splitted[0] + version_splitted[1].rjust(2, '0') + version_splitted[2].rjust(2, '0')
end

def fix_avd_location
  json_file = "#{@fastlane_folder}/AVD_setup.json"

  json = JSON.parse(File.read(json_file))

  json["avd_list"].each do |avd|
    avd["create_avd_hardware_config_filepath"] = File.expand_path(avd["create_avd_hardware_config_filepath"])
  end

  File.write(json_file, JSON.pretty_generate(json))
end

def get_languages(metadata)
  result = []
  metadata["languages"].each do |key, _|
    result.push(key)
  end
  result
end

def prepare_android_metadata

  FileUtils.rm_rf("#{@fastlane_folder}/metadata/", secure: true)
  FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android")
  FileUtils.rm_rf("#{@fastlane_folder}/screenshots/*", secure: true)
  FileUtils.mkdir_p("#{@fastlane_folder}/screenshots/android/")

  @languages.each {|lang|
    FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android/#{lang}/images")
    FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android/#{lang}/images/phoneScreenshots")
    FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android/#{lang}/images/sevenInchScreenshots")
    FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android/#{lang}/images/tenInchScreenshots")
    FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android/#{lang}/images/tvScreenshots")
    FileUtils.mkdir_p("#{@fastlane_folder}/metadata/android/#{lang}/images/wearScreenshots")
    FileUtils.touch("#{@fastlane_folder}/metadata/android/#{lang}/video.txt")

    language_metadata = @metadata["languages"][lang]
    File.write("#{@fastlane_folder}/metadata/android/#{lang}/title.txt", language_metadata["name"])
    File.write("#{@fastlane_folder}/metadata/android/#{lang}/short_description.txt", language_metadata["short_description"])
    File.write("#{@fastlane_folder}/metadata/android/#{lang}/full_description.txt", language_metadata["description"])

    FileUtils.cp(@metadata["android_app_icon"], "#{@fastlane_folder}/metadata/android/#{lang}/images/icon.png")
    FileUtils.cp(@metadata["feature_graphic"], "#{@fastlane_folder}/metadata/android/#{lang}/images/featureGraphic.png")
    FileUtils.cp(@metadata["promo_graphic"], "#{@fastlane_folder}/metadata/android/#{lang}/images/promoGraphicpng")
  }

end

def current_dir
  File.basename(Dir.getwd)
end

def in_fastlane
  current_dir == 'fastlane'
end
