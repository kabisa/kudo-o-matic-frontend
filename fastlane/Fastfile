require 'pry'

lane :deploy do
  if @build_hockey
    deploy_android
    deploy_ios
  end
end

lane :deploy_android do
  FileUtils.rm_rf('cordova/platforms/android/build/outputs/apk/.', secure: true)
  version_splitted = @app_version.split "."
  android_version = version_splitted[0] + "00" + version_splitted[1] + version_splitted[2]


  sh('APP_ENV=#{@environment} bin/maji build android')

  unless @branch == 'appstore'

    hockey public_identifier: ENV['FL_HOCKEY_PUBLIC_IDENTIFIER_ANDROID'],
           apk: "#{Dir.pwd}/cordova/platforms/android/build/outputs/apk/android-debug.apk",
           create_update: true,
           bundle_version: android_version,
           bundle_short_version: @branch,
           status: '2',
           notes: @release_notes
  else
    # release procedure for play store here
    sh('APP_ENV=#{@environment} bin/maji build android --release')

    sign_apk(
      keystore_path: "#{currentDir}/fastlane/vault/android.jks",
      alias: "android-release-signed",
      storepass: "dMOvHv7BPvBSDBswx0RT5H1M6wPCGblw",
      tsa: "http://timestamp.comodoca.com/rfc316",
      apk_path: File.expand_path("cordova/platforms/android/build/outputs/apk/android-release-unsigned.apk", File.dirname(__FILE__))
    )

    zipalign(apk_path: "#{lane_context[SharedValues::SIGNED_APK_PATH]}")

    sh 'rm -Rf fastlane/screenshots/*'

    sh("calabash-android resign #{File.expand_path("cordova/platforms/android/build/outputs/apk/android-release-unsigned.apk", File.dirname(__FILE__))}")


    automated_test_emulator_run(
      AVD_setup_path: "#{currentDir}/fastlane/AVD_setup.json",
      shell_task:"SCREENSHOT_PATH=fastlane/screenshots/android cd #{File.expand_path(currentDir, File.dirname(__FILE__))} | bundler exec calabash-android run #{File.expand_path("cordova/platforms/android/build/outputs/apk/android-release-unsigned.apk", File.dirname(__FILE__))}"
    )

    supply  track: "rollout",
            apk: "#{currentDir}/cordova/platforms/android/build/outputs/apk/android-release.apk"

  end
end

lane :deploy_ios do
    FileUtils.rm_rf('cordova/platforms/ios/build/device/.', secure: true)

    #Make sure the old result is removed
    sh("rm -Rf tmp/output/#{@app_name}.result/")
    sh("rm -Rf tmp/output/#{@app_name}.result/")

    # where the signed ipa is placed
    output_dir = File.join(Dir.pwd, 'tmp/output')
    setup_jenkins(output_directory: output_dir)

    #Download the profile from apple so we can obtain the profile_uuid of the provisioning profile
    sh("rm -Rf profiles/")
    sh("mkdir profiles")
    sh("fastlane sigh --provisioning_name=\"match AdHoc #{@app_identifier}\" --username=\"info@kabisa.nl\" --app_identifier=\"#{@app_identifier}\" --skip_install --adhoc --ignore_profiles_with_different_name --output_path=\"./profiles\"")
    sh("security cms -D -i ./profiles/AdHoc_#{@app_identifier}.mobileprovision > ./profiles/AdHoc_#{@app_identifier}.plist || true")
    profile_uuid = sh("/usr/libexec/PlistBuddy -c \"Print :UUID\" ./profiles/AdHoc_#{@app_identifier}.plist").chomp
    sh("rm -R profiles/")

    #Build the app for ios
    sh("APP_ENV=#{@environment} bin/maji build ios -- --codeSignIdentity=\"iPhone Distribution: Kabisa BV (9H6JXDUXPW)\" --developmentTeam=\"9H6JXDUXPW\" --packageType=\"adHoc\" --provisioningProfile=\"#{profile_uuid}\"")

    match username: 'info@kabisa.nl',
          git_url: 'git@github.com:kabisa/match-certificates.git',
          type: 'adhoc',
          app_identifier: @app_identifier,
          force_for_new_devices: :true

    #Make sure automatic code signing is disabled, we dont want this.
    disable_automatic_code_signing(
        path: "#{currentDir}/cordova/platforms/ios/#{@app_name}.xcodeproj",
        team_id: "9H6JXDUXPW"
    )

    #Make sure the correct provisioning profiles are setup based on the earlier obtained profile_uuid
    update_project_provisioning(
      xcodeproj: "#{currentDir}/cordova/platforms/ios/#{@app_name}.xcodeproj",
      profile: "/Users/jenkins/Library/MobileDevice/Provisioning\ Profiles/#{profile_uuid}.mobileprovision",
      build_configuration: "Release"
    )

    # opening xcode prevents timeout
    sh("open -a xcode cordova/platforms/ios/#{@app_name}.xcodeproj")

    gym scheme: @app_name,
        project: "#{currentDir}/cordova/platforms/ios/#{@app_name}.xcodeproj",
        export_method: "ad-hoc"


    unless @branch == 'appstore'
      hockey public_identifier: ENV['FL_HOCKEY_PUBLIC_IDENTIFIER_IOS'],
             ipa: File.join(output_dir, "#{@app_name}.ipa"),
             create_update: true,
             bundle_version: @app_version,
             bundle_short_version: @branch,
             status: '2',
             notes: @release_notes

    else
      # release procedure for appstore here
      # Make sure old screenshots are removed
      sh 'rm -Rf fastlane/screenshots/*'

      #generate new screenshots
  	  snapshot  project: "#{currentDir}/cordova/platforms/ios/#{@app_name}.xcodeproj",
  	            output_directory: "#{currentDir}/fastlane/screenshots/",
  	            scheme: @app_name


      deliver ipa: "#{output_dir}/#{@app_name}.ipa",
              submit_for_review: true,
              force: true,
              username: "info@kabisa.nl"

    end

end

def currentDir
  File.basename(Dir.getwd)
end

def inFastlane
  currentDir == 'fastlane'
end

before_all do
  message =  changelog_from_git_commits(commits_count: 1)
  @app_version = sh('cat ../cordova/config.xml | grep \'^<widget\' | sed -E \'s|^.*version="([^"]+)".*|\1|\'').chomp
  @app_name = sh('cat ../cordova/config.xml | egrep \'<name>(.*?)<\/name>\' | sed -e \'s,.*<name>\([^<]*\)</name>.*,\1,g\'').chomp
  @app_identifier = sh('cat ../cordova/package.json | grep -o \'"name": *"[^"]*"\'  | grep -o \'"[^"]*"$\'').chomp.gsub!(/\A"|"\Z/, '')
  @environment = "development"
  if @branch == 'appstore'
     @environment = "production"
  end
  @build_hockey = message.include?('BUILD_HOCKEY')
  @release_notes = message.gsub('BUILD_HOCKEY', '')
  @branch = git_branch.gsub('origin/', '')
  Dir.chdir('..') if inFastlane
end
