require 'pry'

lane :deploy do
  if @build_hockey
    deploy_android
    deploy_ios
  end
end

lane :deploy_android do
  FileUtils.rm_rf('cordova/platforms/android/build/outputs/apk/.', secure: true)
  unless @branch == 'test'
    sh('APP_ENV=development bin/maji build android')
    hockey public_identifier: ENV['FL_HOCKEY_PUBLIC_IDENTIFIER_ANDROID'],
           apk: "#{Dir.pwd}/cordova/platforms/android/build/outputs/apk/android-debug.apk",
           create_update: true,
           bundle_version: '10102',
           bundle_short_version: @branch,
           status: '2',
           notes: @release_notes
  else
    # release procedure for play store here

  end
end

lane :deploy_ios do
    FileUtils.rm_rf('cordova/platforms/ios/build/device/.', secure: true)
    unless @branch == 'test'

      #Make sure the old result is removed
      sh('rm -Rf tmp/output/kudo-o-matic.result/')

      #Download the profile from apple so we can obtain the profile_uuid of the provisioning profile
      sh('rm -Rf profiles/')
      sh('mkdir profiles')
      sh('fastlane sigh --provisioning_name="match AdHoc nl.kabisa.kudoomatic" --username="info@kabisa.nl" --app_identifier="nl.kabisa.kudoomatic" --skip_install --adhoc --ignore_profiles_with_different_name --output_path="./profiles"')
      sh('security cms -D -i ./profiles/AdHoc_nl.kabisa.kudoomatic.mobileprovision > ./profiles/AdHoc_nl.kabisa.kudoomatic.plist || true')
      profile_uuid = sh('/usr/libexec/PlistBuddy -c "Print :UUID" ./profiles/AdHoc_nl.kabisa.kudoomatic.plist').chomp
      sh('rm -R profiles/')

      sh('cordova plugin save')
      sh('cordova platform rm ios')
      sh('cordova platform add ios')
      #Build the app for ios
      sh("APP_ENV=development bin/maji build ios -- --codeSignIdentity=\"iPhone Distribution: Kabisa BV (9H6JXDUXPW)\" --developmentTeam=\"9H6JXDUXPW\" --packageType=\"adHoc\" --provisioningProfile=\"#{profile_uuid}\"")

      # where the signed ipa is placed
      output_dir = File.join(Dir.pwd, 'tmp/output')
      setup_jenkins(output_directory: output_dir)

      match username: 'info@kabisa.nl',
            git_url: 'git@github.com:kabisa/match-certificates.git',
            type: 'adhoc',
            app_identifier: 'nl.kabisa.kudoomatic',
            force_for_new_devices: :true

      #Add missing attributes to project config, to make sure Xcode can work with it.
      upgrade_super_old_xcode(
          path: "#{currentDir}/cordova/platforms/ios/kudo-o-matic.xcodeproj",
          team_id: "9H6JXDUXPW"
      )

      #Make sure automatic code signing is disabled, we dont want this.
      disable_automatic_code_signing(
          path: "#{currentDir}/cordova/platforms/ios/kudo-o-matic.xcodeproj",
          team_id: "9H6JXDUXPW"
      )

      #Make sure the correct provisioning profiles are setup based on the earlier obtained profile_uuid
      update_project_provisioning(
        xcodeproj: "#{currentDir}/cordova/platforms/ios/kudo-o-matic.xcodeproj",
        profile: "/Users/jenkins/Library/MobileDevice/Provisioning\ Profiles/#{profile_uuid}.mobileprovision",
        build_configuration: "Release"
      )

      # opening xcode prevents timeout
      sh 'open -a xcode cordova/platforms/ios/kudo-o-matic.xcodeproj'

      gym scheme: 'kudo-o-matic',
          project: "#{currentDir}/cordova/platforms/ios/kudo-o-matic.xcodeproj",
          export_method: "ad-hoc"

      hockey public_identifier: ENV['FL_HOCKEY_PUBLIC_IDENTIFIER_IOS'],
             ipa: File.join(output_dir, 'kudo-o-matic.ipa'),
             create_update: true,
             bundle_version: '1.0.7',
             bundle_short_version: @branch,
             status: '2',
             notes: @release_notes

    else
      # release procedure for appstore here

    end

end

def currentDir
  File.basename(Dir.getwd)
end

def inFastlane
  currentDir == 'fastlane'
end

before_all do
  message =  changelog_from_git_commits(commits_count: 1)
  @build_hockey = message.include?('BUILD_HOCKEY')
  @release_notes = message.gsub('BUILD_HOCKEY', '')
  @branch = git_branch.gsub('origin/', '')
  Dir.chdir('..') if inFastlane
end
